[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-08-03 16:15:28.654322",
  "module": "Dsi Erp",
  "name": "Calculate Profile Completion",
  "script": "frappe.ui.form.on('Employee', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.__islocal !== 1) {\r\n            calculate_profile_completion(frm);\r\n        }\r\n    },\r\n\r\n    validate: function(frm) {\r\n        calculate_profile_completion(frm);\r\n    }\r\n});\r\n\r\nfunction calculate_profile_completion(frm) {\r\n    let fields_to_check = [\r\n        'first_name', 'cell_number', 'person_to_be_contacted', 'relation', 'marital_status',\r\n        'blood_group', 'family_background', 'health_details', 'emergency_phone_number',\r\n        'image', 'personal_email', 'company_email', 'bio', 'education', 'external_work_history',\r\n        'internal_work_history', 'passport_number', 'valid_upto', 'civil_id', 'civil_idexpiry',\r\n        'gender', 'salutation', 'bank_name', 'bank_ac_no'\r\n    ];\r\n\r\n    let total_fields = fields_to_check.length;\r\n    let filled_fields = 0;\r\n\r\n    fields_to_check.forEach(function(field) {\r\n        if (frm.doc[field]) {\r\n            filled_fields++;\r\n        }\r\n    });\r\n\r\n    let completion_percentage = (filled_fields / total_fields) * 100;\r\n    let rounded_percentage = Math.round(completion_percentage);\r\n\r\n    frm.set_value('custom_profile_completion_percentage', rounded_percentage);\r\n    frm.set_df_property('completion_percentage_display', 'options', `Profile Completion: ${rounded_percentage}%`);\r\n\r\n    let indicator_color = rounded_percentage === 100 ? 'green' : 'orange';\r\n    frm.dashboard.set_headline_alert(`Profile Completion: ${rounded_percentage}%`, indicator_color);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Vehicle Log",
  "enabled": 1,
  "modified": "2025-08-27 12:10:06.556010",
  "module": "Dsi Erp",
  "name": "Vehicle Trip KM",
  "script": "frappe.ui.form.on('Vehicle Log', {\r\n    refresh: function(frm) {\r\n        calculate_sum(frm);\r\n        calculate_next_service(frm);\r\n        calculate_total_service_expense(frm);\r\n    },\r\n    odometer: function(frm) { \r\n        calculate_sum(frm);\r\n    },\r\n    last_odometer: function(frm) { \r\n        calculate_sum(frm);\r\n    },\r\n    custom_service_km: function(frm) { \r\n        calculate_next_service(frm);\r\n    },\r\n    custom_service_period: function(frm) { \r\n        calculate_next_service(frm);\r\n    },\r\n    service_detail_add: function(frm) { \r\n        calculate_total_service_expense(frm);\r\n    },\r\n    service_detail_remove: function(frm) { \r\n        calculate_total_service_expense(frm);\r\n    }\r\n});\r\n\r\n// Calculate total KM\r\nfunction calculate_sum(frm) {\r\n    let value_one = parseFloat(frm.doc.odometer) || 0;\r\n    let value_two = parseFloat(frm.doc.last_odometer) || 0;\r\n    let total = value_one - value_two;\r\n\r\n    frm.set_value('custom_total_km', total);\r\n    frm.refresh_field('custom_total_km');\r\n}\r\n\r\n// Calculate next service\r\nfunction calculate_next_service(frm) {\r\n    let service_km = parseFloat(frm.doc.custom_service_km) || 0;\r\n    let service_period = parseFloat(frm.doc.custom_service_period) || 0;\r\n    let next_service = service_km + service_period;\r\n\r\n    frm.set_value('custom_next_service', next_service);\r\n    frm.refresh_field('custom_next_service');\r\n}\r\n\r\n// Calculate total service expense\r\nfunction calculate_total_service_expense(frm) {\r\n    let total_expense = 0;\r\n\r\n    if (frm.doc.service_detail && frm.doc.service_detail.length > 0) {\r\n        frm.doc.service_detail.forEach(row => {\r\n            total_expense += parseFloat(row.expense_amount) || 0;\r\n        });\r\n    }\r\n\r\n    frm.set_value('custom_total_service_expense', total_expense);\r\n    frm.refresh_field('custom_total_service_expense');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-08-27 12:09:47.177731",
  "module": "Dsi Erp",
  "name": "Quantity Calculations in BOM",
  "script": "frappe.ui.form.on(\"BOM Item\", {\r\n    custom_formula: function(frm, cdt, cdn) {\r\n        calculate_qty(frm, cdt, cdn);\r\n    },\r\n    item_code: function(frm, cdt, cdn) {\r\n        calculate_qty(frm, cdt, cdn);\r\n    }\r\n});\r\nfrappe.ui.form.on(\"BOM\", {\r\n    custom_total_length: function(frm) { update_area_and_recalc(frm); },\r\n    custom_total_width: function(frm) { update_area_and_recalc(frm); },\r\n    custom_total_area: function(frm) { recalc_all_rows(frm); },  // still allow manual override\r\n    custom_module_length: function(frm) { recalc_all_rows(frm); },\r\n    custom_module_width: function(frm) { recalc_all_rows(frm); },\r\n    custom_noof_modules: function(frm) { recalc_all_rows(frm); },\r\n    custom_wall_length: function(frm) { recalc_all_rows(frm); },\r\n    custom_wet_wall_length: function(frm) { recalc_all_rows(frm); }\r\n});\r\n\r\nfunction update_area_and_recalc(frm) {\r\n    let L = flt(frm.doc.custom_total_length);\r\n    let W = flt(frm.doc.custom_total_width);\r\n\r\n    if (L && W) {\r\n        // auto calculate total area\r\n        let area = L * W;\r\n        frm.set_value(\"custom_total_area\", area);\r\n    }\r\n    recalc_all_rows(frm);\r\n}\r\n\r\nfunction recalc_all_rows(frm) {\r\n    (frm.doc.items || []).forEach(row => {\r\n        calculate_qty(frm, row.doctype, row.name);\r\n    });\r\n    frm.refresh_field(\"items\");\r\n}\r\n\r\nfunction calculate_qty(frm, cdt, cdn) {\r\n    let row = locals[cdt][cdn];\r\n\r\n    // Parent custom fields\r\n    let L = flt(frm.doc.custom_total_length);\r\n    let W = flt(frm.doc.custom_total_width);\r\n    let A = flt(frm.doc.custom_total_area);\r\n    let ML = flt(frm.doc.custom_module_length);\r\n    let MW = flt(frm.doc.custom_module_width);\r\n    let NOM = flt(frm.doc.custom_noof_modules);\r\n    let WL = flt(frm.doc.custom_wall_length);\r\n    let WWL = flt(frm.doc.custom_wet_wall_length);\r\n\r\n    try {\r\n        // Context dictionary (short variable names)\r\n        let context = { L, W, A, ML, MW, NOM, WL, WWL };\r\n\r\n        let formula = (row.custom_formula || \"\").trim();\r\n        if (!formula) return;\r\n        \r\n        formula = formula.toUpperCase();\r\n        // Replace variables with actual values\r\n        for (let key in context) {\r\n            let regex = new RegExp(`\\\\b${key}\\\\b`, \"g\");\r\n            formula = formula.replace(regex, context[key]);\r\n        }\r\n\r\n        // Allow only numbers and math operators before eval\r\n        if (/^[0-9+\\-*/().\\s]+$/.test(formula)) {\r\n            let qty = eval(formula);\r\n            frappe.model.set_value(cdt, cdn, \"qty\", qty);\r\n        }\r\n\r\n    } catch (e) {\r\n        console.log(\"Formula error in row \" + row.idx + \": \" + e.message);\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-08-27 12:09:56.421552",
  "module": "Dsi Erp",
  "name": "Depending Calculation in BOM",
  "script": "\r\n// --- Child table triggers ---\r\nconst fetch_all_dependencies_debounced = frappe.utils.debounce(fetch_all_dependencies, 300);\r\n\r\nfrappe.ui.form.on(\"BOM Item\", {\r\n    qty(frm) {\r\n        if (frm._updating_dep_qty) return;   // prevent loop\r\n        fetch_all_dependencies_debounced(frm);\r\n    },\r\n    item_code(frm) {\r\n        if (frm._updating_dep_qty) return;   // prevent loop\r\n        fetch_all_dependencies_debounced(frm);\r\n    },\r\n    items_remove(frm) {\r\n        if (frm._updating_dep_qty) return;   // prevent loop\r\n        fetch_all_dependencies_debounced(frm);\r\n    }\r\n});\r\n\r\n// --- Core logic ---\r\nasync function fetch_all_dependencies(frm) {\r\n    // if another update is running, skip this run\r\n    if (frm._updating_dep_qty) return;\r\n\r\n    frm._updating_dep_qty = true;  // ðŸ”’ enter critical section\r\n    try {\r\n        const dep_qty_map = {};\r\n        const rows = (frm.doc.items || []).filter(r => r.item_code && flt(r.qty));\r\n\r\n        // Get dependencies for each BOM item and accumulate totals per dependent item\r\n        for (const row of rows) {\r\n            const r = await frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: { doctype: \"Item\", name: row.item_code }\r\n            });\r\n            const item_doc = r.message;\r\n            const deps = (item_doc && item_doc.custom_depending_items) || [];\r\n\r\n            deps.forEach(dep => {\r\n                if (!dep.item || !dep.quantity) return;\r\n                const code = dep.item;\r\n                const add_qty = flt(row.qty) * flt(dep.quantity);\r\n                dep_qty_map[code] = (dep_qty_map[code] || 0) + add_qty;\r\n            });\r\n        }\r\n\r\n        // Apply updates only when needed (avoid triggering events unnecessarily)\r\n        let any_change = false;\r\n        for (const [code, total] of Object.entries(dep_qty_map)) {\r\n            const target = (frm.doc.items || []).find(i => i.item_code === code);\r\n            if (!target) continue; // only update items that already exist in BOM\r\n\r\n            const current = flt(target.qty);\r\n            const desired = flt(total);\r\n            if (current !== desired) {\r\n                frappe.model.set_value(target.doctype, target.name, \"qty\", desired);\r\n                any_change = true;\r\n            }\r\n        }\r\n\r\n        if (any_change) frm.refresh_field(\"items\");\r\n\r\n    } catch (e) {\r\n        console.error(\"Fetch Dependent Qty error:\", e);\r\n        frappe.msgprint(__(\"Could not update dependent quantities.\"));\r\n    } finally {\r\n        frm._updating_dep_qty = false; // ðŸ”“ leave critical section\r\n    }\r\n}",
  "view": "Form"
 }
]